{"ast":null,"code":"import{GoogleGenerativeAI}from\"@google/generative-ai\";const genAI=new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY);const chatSessions=new Map();const REMINDER_INTERVAL=5;const MAX_HISTORY_LENGTH=10;export const initializeChatSession=async(characterId,scenarioPrompt)=>{if(!process.env.REACT_APP_GEMINI_API_KEY){console.error(\"Gemini API key is not set\");return null;}try{const model=genAI.getGenerativeModel({model:\"gemini-1.5-flash\"});const chatSession=await model.startChat({history:[{role:\"user\",parts:[{text:\"\".concat(scenarioPrompt,\"\\n\\nIMPORTANT: You must ALWAYS respond with a maximum of 3 sentences. Never exceed this limit. Keep your responses concise and to the point.\")}]}],generationConfig:{temperature:0.9,topK:40,topP:0.95,maxOutputTokens:2048},safetySettings:[{category:\"HARM_CATEGORY_HARASSMENT\",threshold:\"BLOCK_NONE\"},{category:\"HARM_CATEGORY_HATE_SPEECH\",threshold:\"BLOCK_NONE\"},{category:\"HARM_CATEGORY_SEXUALLY_EXPLICIT\",threshold:\"BLOCK_NONE\"},{category:\"HARM_CATEGORY_DANGEROUS_CONTENT\",threshold:\"BLOCK_NONE\"}]});chatSessions.set(characterId,{session:chatSession,messageCount:0,scenarioPrompt:scenarioPrompt,conversationHistory:[]});return chatSession;}catch(error){console.error(\"Error initializing chat session:\",error);throw error;}};export const fetchGeminiReply=async(userMessage,characterId)=>{if(!process.env.REACT_APP_GEMINI_API_KEY){console.error(\"Gemini API key is not set\");return\"API 키가 설정되지 않았습니다.\";}try{const sessionInfo=chatSessions.get(characterId);if(!sessionInfo){throw new Error(\"Chat session not initialized\");}const{session,messageCount,scenarioPrompt,conversationHistory}=sessionInfo;sessionInfo.messageCount++;conversationHistory.push({role:\"user\",content:userMessage});if(conversationHistory.length>MAX_HISTORY_LENGTH){conversationHistory.shift();}if(messageCount%REMINDER_INTERVAL===0){const reminderMessage=\"Remember: \".concat(scenarioPrompt.split('\\n')[0],\"\\nIMPORTANT: Keep your response to a maximum of 3 sentences.\");await session.sendMessage(reminderMessage);}const result=await session.sendMessage(userMessage);const response=await result.response;conversationHistory.push({role:\"assistant\",content:response.text()});if(conversationHistory.length>MAX_HISTORY_LENGTH){conversationHistory.shift();}return response;}catch(error){console.error(\"Error calling Gemini API:\",error);throw error;}};export const clearChatSession=characterId=>{chatSessions.delete(characterId);};export const getConversationHistory=characterId=>{const sessionInfo=chatSessions.get(characterId);return sessionInfo?sessionInfo.conversationHistory:[];};","map":{"version":3,"names":["GoogleGenerativeAI","genAI","process","env","REACT_APP_GEMINI_API_KEY","chatSessions","Map","REMINDER_INTERVAL","MAX_HISTORY_LENGTH","initializeChatSession","characterId","scenarioPrompt","console","error","model","getGenerativeModel","chatSession","startChat","history","role","parts","text","concat","generationConfig","temperature","topK","topP","maxOutputTokens","safetySettings","category","threshold","set","session","messageCount","conversationHistory","fetchGeminiReply","userMessage","sessionInfo","get","Error","push","content","length","shift","reminderMessage","split","sendMessage","result","response","clearChatSession","delete","getConversationHistory"],"sources":["/home/kmean/Desktop/Mobile/term_project/estudy_gpt/web/web_chat/src/api/gemini.js"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY);\n\nconst chatSessions = new Map();\n\nconst REMINDER_INTERVAL = 5;\n\nconst MAX_HISTORY_LENGTH = 10;\n\nexport const initializeChatSession = async (characterId, scenarioPrompt) => {\n    if (!process.env.REACT_APP_GEMINI_API_KEY) {\n        console.error(\"Gemini API key is not set\");\n        return null;\n    }\n\n    try {\n        const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n        const chatSession = await model.startChat({\n            history: [\n                {\n                    role: \"user\",\n                    parts: [{ text: `${scenarioPrompt}\\n\\nIMPORTANT: You must ALWAYS respond with a maximum of 3 sentences. Never exceed this limit. Keep your responses concise and to the point.` }]\n                }\n            ],\n            generationConfig: {\n                temperature: 0.9,\n                topK: 40,\n                topP: 0.95,\n                maxOutputTokens: 2048,\n            },\n            safetySettings: [\n                {\n                    category: \"HARM_CATEGORY_HARASSMENT\",\n                    threshold: \"BLOCK_NONE\",\n                },\n                {\n                    category: \"HARM_CATEGORY_HATE_SPEECH\",\n                    threshold: \"BLOCK_NONE\",\n                },\n                {\n                    category: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n                    threshold: \"BLOCK_NONE\",\n                },\n                {\n                    category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n                    threshold: \"BLOCK_NONE\",\n                },\n            ],\n        });\n\n        chatSessions.set(characterId, {\n            session: chatSession,\n            messageCount: 0,\n            scenarioPrompt: scenarioPrompt,\n            conversationHistory: []\n        });\n\n        return chatSession;\n    } catch (error) {\n        console.error(\"Error initializing chat session:\", error);\n        throw error;\n    }\n};\n\nexport const fetchGeminiReply = async (userMessage, characterId) => {\n    if (!process.env.REACT_APP_GEMINI_API_KEY) {\n        console.error(\"Gemini API key is not set\");\n        return \"API 키가 설정되지 않았습니다.\";\n    }\n\n    try {\n        const sessionInfo = chatSessions.get(characterId);\n        if (!sessionInfo) {\n            throw new Error(\"Chat session not initialized\");\n        }\n\n        const { session, messageCount, scenarioPrompt, conversationHistory } = sessionInfo;\n\n        sessionInfo.messageCount++;\n\n        conversationHistory.push({ role: \"user\", content: userMessage });\n        if (conversationHistory.length > MAX_HISTORY_LENGTH) {\n            conversationHistory.shift();\n        }\n\n        if (messageCount % REMINDER_INTERVAL === 0) {\n            const reminderMessage = `Remember: ${scenarioPrompt.split('\\n')[0]}\\nIMPORTANT: Keep your response to a maximum of 3 sentences.`;\n            await session.sendMessage(reminderMessage);\n        }\n\n        const result = await session.sendMessage(userMessage);\n        const response = await result.response;\n\n        conversationHistory.push({ role: \"assistant\", content: response.text() });\n        if (conversationHistory.length > MAX_HISTORY_LENGTH) {\n            conversationHistory.shift();\n        }\n\n        return response;\n    } catch (error) {\n        console.error(\"Error calling Gemini API:\", error);\n        throw error;\n    }\n};\n\nexport const clearChatSession = (characterId) => {\n    chatSessions.delete(characterId);\n};\n\nexport const getConversationHistory = (characterId) => {\n    const sessionInfo = chatSessions.get(characterId);\n    return sessionInfo ? sessionInfo.conversationHistory : [];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}