{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getDatabase, ref, push, set, get } from \"firebase/database\";\nimport { getAuth, signInAnonymously } from \"firebase/auth\";\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n};\nconst app = initializeApp(firebaseConfig);\nconst db = getDatabase(app);\nconst auth = getAuth(app);\nlet globalUid = null;\nexport const initializeAuth = async userData => {\n  try {\n    let uid;\n    if (userData && userData.uuid) {\n      // Flutter에서 uuid를 받은 경우\n      uid = userData.uuid;\n      console.log(\"=== Flutter에서 받은 uuid ===\");\n      console.log(\"userData:\", userData);\n      console.log(\"userData.uuid:\", userData.uuid);\n      console.log(\"설정된 uid:\", uid);\n    } else if (!auth.currentUser) {\n      // 웹에서 직접 접속한 경우에만 익명 인증 실행\n      const userCredential = await signInAnonymously(auth);\n      uid = userCredential.user.uid;\n      console.log(\"=== Firebase 익명 인증으로 생성된 uid ===\");\n      console.log(\"userCredential:\", userCredential);\n      console.log(\"userCredential.user.uid:\", userCredential.user.uid);\n      console.log(\"설정된 uid:\", uid);\n    } else {\n      // 이미 인증된 경우\n      uid = auth.currentUser.uid;\n      console.log(\"=== 이미 인증된 사용자 ===\");\n      console.log(\"auth.currentUser.uid:\", uid);\n    }\n    globalUid = uid;\n    console.log(\"=== 최종 설정된 globalUid ===\");\n    console.log(\"globalUid:\", globalUid);\n    const userRef = ref(db, `users/${uid}`);\n    const snapshot = await get(userRef);\n    if (!snapshot.exists()) {\n      await set(userRef, {\n        cefrLevel: \"A1\",\n        createdAt: Date.now(),\n        totalSessions: 0,\n        recentScores: []\n      });\n    }\n    return uid;\n  } catch (error) {\n    console.error(\"Error initializing auth:\", error);\n    throw error;\n  }\n};\nexport const saveChat = async (message, characterId) => {\n  try {\n    if (!globalUid) {\n      throw new Error(\"User not initialized\");\n    }\n    console.log(\"=== saveChat 함수에서 사용되는 uid ===\");\n    console.log(\"globalUid:\", globalUid);\n    const chatRef = ref(db, `users/${globalUid}/chat/Conversation`);\n    const newChatRef = push(chatRef);\n    await set(newChatRef, {\n      role: \"user\",\n      content: message,\n      characterId,\n      timestamp: Date.now()\n    });\n    return newChatRef.key;\n  } catch (error) {\n    console.error(\"Error saving chat:\", error.message);\n    throw error;\n  }\n};\n\n//추후 오답노트 기록 불러올 일 생기면 사용할 함수\nexport const getChatsByUser = async () => {\n  try {\n    if (!globalUid) {\n      throw new Error(\"User not initialized\");\n    }\n    const chatRef = ref(db, `users/${globalUid}/chat/Conversation`);\n    const snapshot = await get(chatRef);\n    if (snapshot.exists()) {\n      const chats = [];\n      snapshot.forEach(childSnapshot => {\n        chats.push({\n          id: childSnapshot.key,\n          ...childSnapshot.val()\n        });\n      });\n      return chats;\n    }\n    return [];\n  } catch (error) {\n    console.error(\"Error retrieving chats:\", error.message);\n    throw error;\n  }\n};\nexport const updateChatAnalysis = async (chatId, analysis) => {\n  try {\n    if (!globalUid) {\n      throw new Error(\"User not initialized\");\n    }\n    const analysisRef = ref(db, `users/${globalUid}/wrongNote/${chatId}`);\n    const now = new Date();\n    await set(analysisRef, {\n      ...analysis,\n      analyzedAt: now.toISOString()\n    });\n  } catch (error) {\n    console.error(\"Error updating chat analysis:\", error.message);\n    throw error;\n  }\n};","map":{"version":3,"names":["initializeApp","getDatabase","ref","push","set","get","getAuth","signInAnonymously","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","measurementId","REACT_APP_FIREBASE_MEASUREMENT_ID","app","db","auth","globalUid","initializeAuth","userData","uid","uuid","console","log","currentUser","userCredential","user","userRef","snapshot","exists","cefrLevel","createdAt","Date","now","totalSessions","recentScores","error","saveChat","message","characterId","Error","chatRef","newChatRef","role","content","timestamp","key","getChatsByUser","chats","forEach","childSnapshot","id","val","updateChatAnalysis","chatId","analysis","analysisRef","analyzedAt","toISOString"],"sources":["/home/kmean/Desktop/Mobile/term_project/estudy_gpt/web/web_chat/src/api/firebase.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getDatabase, ref, push, set, get } from \"firebase/database\";\nimport { getAuth, signInAnonymously } from \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\nconst db = getDatabase(app);\nconst auth = getAuth(app);\n\nlet globalUid = null;\n\nexport const initializeAuth = async (userData) => {\n  try {\n    let uid;\n\n    if (userData && userData.uuid) {\n      // Flutter에서 uuid를 받은 경우\n      uid = userData.uuid;\n      console.log(\"=== Flutter에서 받은 uuid ===\");\n      console.log(\"userData:\", userData);\n      console.log(\"userData.uuid:\", userData.uuid);\n      console.log(\"설정된 uid:\", uid);\n    } else if (!auth.currentUser) {\n      // 웹에서 직접 접속한 경우에만 익명 인증 실행\n      const userCredential = await signInAnonymously(auth);\n      uid = userCredential.user.uid;\n      console.log(\"=== Firebase 익명 인증으로 생성된 uid ===\");\n      console.log(\"userCredential:\", userCredential);\n      console.log(\"userCredential.user.uid:\", userCredential.user.uid);\n      console.log(\"설정된 uid:\", uid);\n    } else {\n      // 이미 인증된 경우\n      uid = auth.currentUser.uid;\n      console.log(\"=== 이미 인증된 사용자 ===\");\n      console.log(\"auth.currentUser.uid:\", uid);\n    }\n\n    globalUid = uid;\n    console.log(\"=== 최종 설정된 globalUid ===\");\n    console.log(\"globalUid:\", globalUid);\n\n    const userRef = ref(db, `users/${uid}`);\n    const snapshot = await get(userRef);\n\n    if (!snapshot.exists()) {\n      await set(userRef, {\n        cefrLevel: \"A1\",\n        createdAt: Date.now(),\n        totalSessions: 0,\n        recentScores: [],\n      });\n    }\n\n    return uid;\n  } catch (error) {\n    console.error(\"Error initializing auth:\", error);\n    throw error;\n  }\n};\n\nexport const saveChat = async (message, characterId) => {\n  try {\n    if (!globalUid) {\n      throw new Error(\"User not initialized\");\n    }\n\n    console.log(\"=== saveChat 함수에서 사용되는 uid ===\");\n    console.log(\"globalUid:\", globalUid);\n\n    const chatRef = ref(db, `users/${globalUid}/chat/Conversation`);\n    const newChatRef = push(chatRef);\n\n    await set(newChatRef, {\n      role: \"user\",\n      content: message,\n      characterId,\n      timestamp: Date.now(),\n    });\n\n    return newChatRef.key;\n  } catch (error) {\n    console.error(\"Error saving chat:\", error.message);\n    throw error;\n  }\n};\n\n//추후 오답노트 기록 불러올 일 생기면 사용할 함수\nexport const getChatsByUser = async () => {\n  try {\n    if (!globalUid) {\n      throw new Error(\"User not initialized\");\n    }\n\n    const chatRef = ref(db, `users/${globalUid}/chat/Conversation`);\n    const snapshot = await get(chatRef);\n\n    if (snapshot.exists()) {\n      const chats = [];\n      snapshot.forEach((childSnapshot) => {\n        chats.push({\n          id: childSnapshot.key,\n          ...childSnapshot.val(),\n        });\n      });\n      return chats;\n    }\n    return [];\n  } catch (error) {\n    console.error(\"Error retrieving chats:\", error.message);\n    throw error;\n  }\n};\n\nexport const updateChatAnalysis = async (chatId, analysis) => {\n  try {\n    if (!globalUid) {\n      throw new Error(\"User not initialized\");\n    }\n\n    const analysisRef = ref(db, `users/${globalUid}/wrongNote/${chatId}`);\n    const now = new Date();\n    await set(analysisRef, {\n      ...analysis,\n      analyzedAt: now.toISOString(),\n    });\n  } catch (error) {\n    console.error(\"Error updating chat analysis:\", error.message);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}