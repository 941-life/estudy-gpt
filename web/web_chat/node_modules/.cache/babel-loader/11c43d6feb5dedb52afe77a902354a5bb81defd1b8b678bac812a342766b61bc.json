{"ast":null,"code":"import _objectSpread from\"/home/kmean/Desktop/Mobile/term_project/estudy_gpt/web/web_chat/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{initializeApp}from\"firebase/app\";import{getDatabase,ref,push,set,get}from\"firebase/database\";import{getAuth,signInAnonymously}from\"firebase/auth\";const firebaseConfig={apiKey:process.env.REACT_APP_FIREBASE_API_KEY,authDomain:process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,databaseURL:process.env.REACT_APP_FIREBASE_DATABASE_URL,projectId:process.env.REACT_APP_FIREBASE_PROJECT_ID,storageBucket:process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,messagingSenderId:process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,appId:process.env.REACT_APP_FIREBASE_APP_ID,measurementId:process.env.REACT_APP_FIREBASE_MEASUREMENT_ID};const app=initializeApp(firebaseConfig);const db=getDatabase(app);const auth=getAuth(app);let globalUid=null;export const initializeAuth=async userData=>{try{let uid;// userData =\nuserData.uuid=\"OgbgMIBPJVTaQr5a91hotzYcOMv2\";// 테스트용 uuid 설정\nif(userData&&userData.uuid){// Flutter에서 uuid를 받은 경우\n// uid = userData.uuid;\nuid=userData;console.log(\"=== Flutter에서 받은 uuid ===\");console.log(\"userData:\",userData);console.log(\"userData.uuid:\",userData.uuid);console.log(\"설정된 uid:\",uid);}else if(!auth.currentUser){// 웹에서 직접 접속한 경우에만 익명 인증 실행\nconst userCredential=await signInAnonymously(auth);uid=userCredential.user.uid;console.log(\"=== Firebase 익명 인증으로 생성된 uid ===\");console.log(\"userCredential:\",userCredential);console.log(\"userCredential.user.uid:\",userCredential.user.uid);console.log(\"설정된 uid:\",uid);}else{// 이미 인증된 경우\nuid=auth.currentUser.uid;console.log(\"=== 이미 인증된 사용자 ===\");console.log(\"auth.currentUser.uid:\",uid);}globalUid=uid;console.log(\"=== 최종 설정된 globalUid ===\");console.log(\"globalUid:\",globalUid);const userRef=ref(db,\"users/\".concat(uid));const snapshot=await get(userRef);if(!snapshot.exists()){await set(userRef,{cefrLevel:\"A1\",createdAt:Date.now(),totalSessions:0,recentScores:[]});}return uid;}catch(error){console.error(\"Error initializing auth:\",error);throw error;}};export const saveChat=async(message,characterId)=>{try{if(!globalUid){throw new Error(\"User not initialized\");}console.log(\"=== saveChat 함수에서 사용되는 uid ===\");console.log(\"globalUid:\",globalUid);const chatRef=ref(db,\"users/\".concat(globalUid,\"/chat/Conversation\"));const newChatRef=push(chatRef);await set(newChatRef,{role:\"user\",content:message,characterId,timestamp:Date.now()});return newChatRef.key;}catch(error){console.error(\"Error saving chat:\",error.message);throw error;}};//추후 오답노트 기록 불러올 일 생기면 사용할 함수\nexport const getChatsByUser=async()=>{try{if(!globalUid){throw new Error(\"User not initialized\");}const chatRef=ref(db,\"users/\".concat(globalUid,\"/chat/Conversation\"));const snapshot=await get(chatRef);if(snapshot.exists()){const chats=[];snapshot.forEach(childSnapshot=>{chats.push(_objectSpread({id:childSnapshot.key},childSnapshot.val()));});return chats;}return[];}catch(error){console.error(\"Error retrieving chats:\",error.message);throw error;}};export const updateChatAnalysis=async(chatId,analysis)=>{try{if(!globalUid){throw new Error(\"User not initialized\");}const analysisRef=ref(db,\"users/\".concat(globalUid,\"/wrongNote/\").concat(chatId));const now=new Date();await set(analysisRef,_objectSpread(_objectSpread({},analysis),{},{analyzedAt:now.toISOString()}));}catch(error){console.error(\"Error updating chat analysis:\",error.message);throw error;}};","map":{"version":3,"names":["initializeApp","getDatabase","ref","push","set","get","getAuth","signInAnonymously","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","measurementId","REACT_APP_FIREBASE_MEASUREMENT_ID","app","db","auth","globalUid","initializeAuth","userData","uid","uuid","console","log","currentUser","userCredential","user","userRef","concat","snapshot","exists","cefrLevel","createdAt","Date","now","totalSessions","recentScores","error","saveChat","message","characterId","Error","chatRef","newChatRef","role","content","timestamp","key","getChatsByUser","chats","forEach","childSnapshot","_objectSpread","id","val","updateChatAnalysis","chatId","analysis","analysisRef","analyzedAt","toISOString"],"sources":["/home/kmean/Desktop/Mobile/term_project/estudy_gpt/web/web_chat/src/api/firebase.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getDatabase, ref, push, set, get } from \"firebase/database\";\nimport { getAuth, signInAnonymously } from \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\nconst db = getDatabase(app);\nconst auth = getAuth(app);\n\nlet globalUid = null;\n\nexport const initializeAuth = async (userData) => {\n  try {\n    let uid;\n\n    // userData =\n\n    userData.uuid = \"OgbgMIBPJVTaQr5a91hotzYcOMv2\"; // 테스트용 uuid 설정\n\n    if (userData && userData.uuid) {\n      // Flutter에서 uuid를 받은 경우\n      // uid = userData.uuid;\n      uid = userData;\n      console.log(\"=== Flutter에서 받은 uuid ===\");\n      console.log(\"userData:\", userData);\n      console.log(\"userData.uuid:\", userData.uuid);\n      console.log(\"설정된 uid:\", uid);\n    } else if (!auth.currentUser) {\n      // 웹에서 직접 접속한 경우에만 익명 인증 실행\n      const userCredential = await signInAnonymously(auth);\n      uid = userCredential.user.uid;\n      console.log(\"=== Firebase 익명 인증으로 생성된 uid ===\");\n      console.log(\"userCredential:\", userCredential);\n      console.log(\"userCredential.user.uid:\", userCredential.user.uid);\n      console.log(\"설정된 uid:\", uid);\n    } else {\n      // 이미 인증된 경우\n      uid = auth.currentUser.uid;\n      console.log(\"=== 이미 인증된 사용자 ===\");\n      console.log(\"auth.currentUser.uid:\", uid);\n    }\n\n    globalUid = uid;\n    console.log(\"=== 최종 설정된 globalUid ===\");\n    console.log(\"globalUid:\", globalUid);\n\n    const userRef = ref(db, `users/${uid}`);\n    const snapshot = await get(userRef);\n\n    if (!snapshot.exists()) {\n      await set(userRef, {\n        cefrLevel: \"A1\",\n        createdAt: Date.now(),\n        totalSessions: 0,\n        recentScores: [],\n      });\n    }\n\n    return uid;\n  } catch (error) {\n    console.error(\"Error initializing auth:\", error);\n    throw error;\n  }\n};\n\nexport const saveChat = async (message, characterId) => {\n  try {\n    if (!globalUid) {\n      throw new Error(\"User not initialized\");\n    }\n\n    console.log(\"=== saveChat 함수에서 사용되는 uid ===\");\n    console.log(\"globalUid:\", globalUid);\n\n    const chatRef = ref(db, `users/${globalUid}/chat/Conversation`);\n    const newChatRef = push(chatRef);\n\n    await set(newChatRef, {\n      role: \"user\",\n      content: message,\n      characterId,\n      timestamp: Date.now(),\n    });\n\n    return newChatRef.key;\n  } catch (error) {\n    console.error(\"Error saving chat:\", error.message);\n    throw error;\n  }\n};\n\n//추후 오답노트 기록 불러올 일 생기면 사용할 함수\nexport const getChatsByUser = async () => {\n  try {\n    if (!globalUid) {\n      throw new Error(\"User not initialized\");\n    }\n\n    const chatRef = ref(db, `users/${globalUid}/chat/Conversation`);\n    const snapshot = await get(chatRef);\n\n    if (snapshot.exists()) {\n      const chats = [];\n      snapshot.forEach((childSnapshot) => {\n        chats.push({\n          id: childSnapshot.key,\n          ...childSnapshot.val(),\n        });\n      });\n      return chats;\n    }\n    return [];\n  } catch (error) {\n    console.error(\"Error retrieving chats:\", error.message);\n    throw error;\n  }\n};\n\nexport const updateChatAnalysis = async (chatId, analysis) => {\n  try {\n    if (!globalUid) {\n      throw new Error(\"User not initialized\");\n    }\n\n    const analysisRef = ref(db, `users/${globalUid}/wrongNote/${chatId}`);\n    const now = new Date();\n    await set(analysisRef, {\n      ...analysis,\n      analyzedAt: now.toISOString(),\n    });\n  } catch (error) {\n    console.error(\"Error updating chat analysis:\", error.message);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}