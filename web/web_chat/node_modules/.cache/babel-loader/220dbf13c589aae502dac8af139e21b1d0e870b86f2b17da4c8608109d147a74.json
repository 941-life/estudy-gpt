{"ast":null,"code":"import { GoogleGenerativeAI } from \"@google/generative-ai\";\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY);\nconst chatSessions = new Map();\nconst REMINDER_INTERVAL = 5;\nconst MAX_HISTORY_LENGTH = 10;\nexport const initializeChatSession = async (characterId, scenarioPrompt) => {\n  if (!process.env.REACT_APP_GEMINI_API_KEY) {\n    console.error(\"Gemini API key is not set\");\n    return null;\n  }\n  try {\n    const model = genAI.getGenerativeModel({\n      model: \"gemini-1.5-flash\"\n    });\n    const chatSession = await model.startChat({\n      history: [{\n        role: \"user\",\n        parts: [{\n          text: `${scenarioPrompt}\\n\\nIMPORTANT: You must ALWAYS respond with a maximum of 3 sentences. Never exceed this limit. Keep your responses concise and to the point.`\n        }]\n      }],\n      generationConfig: {\n        temperature: 0.9,\n        topK: 40,\n        topP: 0.95,\n        maxOutputTokens: 2048\n      },\n      safetySettings: [{\n        category: \"HARM_CATEGORY_HARASSMENT\",\n        threshold: \"BLOCK_NONE\"\n      }, {\n        category: \"HARM_CATEGORY_HATE_SPEECH\",\n        threshold: \"BLOCK_NONE\"\n      }, {\n        category: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n        threshold: \"BLOCK_NONE\"\n      }, {\n        category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n        threshold: \"BLOCK_NONE\"\n      }]\n    });\n    chatSessions.set(characterId, {\n      session: chatSession,\n      messageCount: 0,\n      scenarioPrompt: scenarioPrompt,\n      conversationHistory: []\n    });\n    return chatSession;\n  } catch (error) {\n    console.error(\"Error initializing chat session:\", error);\n    throw error;\n  }\n};\nexport const fetchGeminiReply = async (userMessage, characterId) => {\n  if (!process.env.REACT_APP_GEMINI_API_KEY) {\n    console.error(\"Gemini API key is not set\");\n    return \"API 키가 설정되지 않았습니다.\";\n  }\n  try {\n    const sessionInfo = chatSessions.get(characterId);\n    if (!sessionInfo) {\n      throw new Error(\"Chat session not initialized\");\n    }\n    const {\n      session,\n      messageCount,\n      scenarioPrompt,\n      conversationHistory\n    } = sessionInfo;\n    sessionInfo.messageCount++;\n    conversationHistory.push({\n      role: \"user\",\n      content: userMessage\n    });\n    if (conversationHistory.length > MAX_HISTORY_LENGTH) {\n      conversationHistory.shift();\n    }\n    if (messageCount % REMINDER_INTERVAL === 0) {\n      const reminderMessage = `Remember: ${scenarioPrompt.split('\\n')[0]}\\nIMPORTANT: Keep your response to a maximum of 3 sentences.`;\n      await session.sendMessage(reminderMessage);\n    }\n    const result = await session.sendMessage(userMessage);\n    const response = await result.response;\n    conversationHistory.push({\n      role: \"assistant\",\n      content: response.text()\n    });\n    if (conversationHistory.length > MAX_HISTORY_LENGTH) {\n      conversationHistory.shift();\n    }\n    return response;\n  } catch (error) {\n    console.error(\"Error calling Gemini API:\", error);\n    throw error;\n  }\n};\nexport const clearChatSession = characterId => {\n  chatSessions.delete(characterId);\n};\nexport const getConversationHistory = characterId => {\n  const sessionInfo = chatSessions.get(characterId);\n  return sessionInfo ? sessionInfo.conversationHistory : [];\n};","map":{"version":3,"names":["GoogleGenerativeAI","genAI","process","env","REACT_APP_GEMINI_API_KEY","chatSessions","Map","REMINDER_INTERVAL","MAX_HISTORY_LENGTH","initializeChatSession","characterId","scenarioPrompt","console","error","model","getGenerativeModel","chatSession","startChat","history","role","parts","text","generationConfig","temperature","topK","topP","maxOutputTokens","safetySettings","category","threshold","set","session","messageCount","conversationHistory","fetchGeminiReply","userMessage","sessionInfo","get","Error","push","content","length","shift","reminderMessage","split","sendMessage","result","response","clearChatSession","delete","getConversationHistory"],"sources":["/home/kmean/Desktop/Mobile/term_project/estudy_gpt/web/web_chat/src/api/gemini.js"],"sourcesContent":["import { GoogleGenerativeAI } from \"@google/generative-ai\";\n\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY);\n\nconst chatSessions = new Map();\n\nconst REMINDER_INTERVAL = 5;\n\nconst MAX_HISTORY_LENGTH = 10;\n\nexport const initializeChatSession = async (characterId, scenarioPrompt) => {\n    if (!process.env.REACT_APP_GEMINI_API_KEY) {\n        console.error(\"Gemini API key is not set\");\n        return null;\n    }\n\n    try {\n        const model = genAI.getGenerativeModel({ model: \"gemini-1.5-flash\" });\n\n        const chatSession = await model.startChat({\n            history: [\n                {\n                    role: \"user\",\n                    parts: [{ text: `${scenarioPrompt}\\n\\nIMPORTANT: You must ALWAYS respond with a maximum of 3 sentences. Never exceed this limit. Keep your responses concise and to the point.` }]\n                }\n            ],\n            generationConfig: {\n                temperature: 0.9,\n                topK: 40,\n                topP: 0.95,\n                maxOutputTokens: 2048,\n            },\n            safetySettings: [\n                {\n                    category: \"HARM_CATEGORY_HARASSMENT\",\n                    threshold: \"BLOCK_NONE\",\n                },\n                {\n                    category: \"HARM_CATEGORY_HATE_SPEECH\",\n                    threshold: \"BLOCK_NONE\",\n                },\n                {\n                    category: \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n                    threshold: \"BLOCK_NONE\",\n                },\n                {\n                    category: \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n                    threshold: \"BLOCK_NONE\",\n                },\n            ],\n        });\n\n        chatSessions.set(characterId, {\n            session: chatSession,\n            messageCount: 0,\n            scenarioPrompt: scenarioPrompt,\n            conversationHistory: []\n        });\n\n        return chatSession;\n    } catch (error) {\n        console.error(\"Error initializing chat session:\", error);\n        throw error;\n    }\n};\n\nexport const fetchGeminiReply = async (userMessage, characterId) => {\n    if (!process.env.REACT_APP_GEMINI_API_KEY) {\n        console.error(\"Gemini API key is not set\");\n        return \"API 키가 설정되지 않았습니다.\";\n    }\n\n    try {\n        const sessionInfo = chatSessions.get(characterId);\n        if (!sessionInfo) {\n            throw new Error(\"Chat session not initialized\");\n        }\n\n        const { session, messageCount, scenarioPrompt, conversationHistory } = sessionInfo;\n\n        sessionInfo.messageCount++;\n\n        conversationHistory.push({ role: \"user\", content: userMessage });\n        if (conversationHistory.length > MAX_HISTORY_LENGTH) {\n            conversationHistory.shift();\n        }\n\n        if (messageCount % REMINDER_INTERVAL === 0) {\n            const reminderMessage = `Remember: ${scenarioPrompt.split('\\n')[0]}\\nIMPORTANT: Keep your response to a maximum of 3 sentences.`;\n            await session.sendMessage(reminderMessage);\n        }\n\n        const result = await session.sendMessage(userMessage);\n        const response = await result.response;\n\n        conversationHistory.push({ role: \"assistant\", content: response.text() });\n        if (conversationHistory.length > MAX_HISTORY_LENGTH) {\n            conversationHistory.shift();\n        }\n\n        return response;\n    } catch (error) {\n        console.error(\"Error calling Gemini API:\", error);\n        throw error;\n    }\n};\n\nexport const clearChatSession = (characterId) => {\n    chatSessions.delete(characterId);\n};\n\nexport const getConversationHistory = (characterId) => {\n    const sessionInfo = chatSessions.get(characterId);\n    return sessionInfo ? sessionInfo.conversationHistory : [];\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}